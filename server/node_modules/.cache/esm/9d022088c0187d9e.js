let Joi,REFRESH_SECRET,RefreshToken,User,CustomErrorHandler,JwtService;_c01‍.x([["default",()=>_c01‍.o]]);_c01‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_c01‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);_c01‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_c01‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_c01‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);





const refreshController = {
    async refresh(req, res, next) {
        // validation
        const refreshSchema = Joi.object({
            refresh_token: Joi.string().required(),
        });
        const { error } = refreshSchema.validate(req.body);

        if (error) {
            return next(error);
        }

        // database
        let refreshtoken;
        try {
            refreshtoken = await RefreshToken.findOne({ token: req.body.refresh_token });
            if (!refreshtoken) {
                return next(CustomErrorHandler.unAuthorized('Invalid refresh token'));
            }

            let userId;
            try {
                const { _id } = await JwtService.verify(refreshtoken.token, REFRESH_SECRET);
                userId = _id;
            } catch(err) {
                return next(CustomErrorHandler.unAuthorized('Invalid refresh token'));
            }

            const user = await User.findOne({ _id: userId });
            if (!user) {
                return next(CustomErrorHandler.unAuthorized('No user found!'));
            }

            // tokens
            // Toekn
            const access_token = JwtService.sign({ _id: user._id, role: user.role });
            const refresh_token = JwtService.sign({ _id: user._id, role: user.role }, '1y', REFRESH_SECRET);
        // database whitelist
            await RefreshToken.create({ token: refresh_token });
            res.json({ access_token, refresh_token });

        } catch(err) {
            return next(new Error('Something went wrong ' + err.message));
        }

    }
};

_c01‍.d(refreshController);